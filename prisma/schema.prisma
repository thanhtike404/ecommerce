generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
    output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  password      String?
  accounts Account[]
  sessions Session[]
  orders   Order[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  iconUrl   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  statusId    Int

  category Category       @relation(fields: [categoryId], references: [id])
  status   ProductStatus  @relation(fields: [statusId], references: [id])
  images   ProductImage[]
  stock    Stock[]

  @@index([categoryId])
  @@index([statusId])
}

model ProductStatus {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  products Product[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Stock {
  id        Int      @id @default(autoincrement())
  productId Int
  sku       String
  stock     Int
  price     Float
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([productId])
}

model Order {
  id              Int       @id @default(autoincrement())
  orderDate       DateTime
  userId          String
  totalAmount     Float
  paymentStatus   String
  paymentMethodId Int
  orderStatus     String?
  shippingAddress String?
  billingAddress  String?
  sailDate        DateTime?
  deliverySteps   Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  orderItems OrderItem[]

  @@index([userId])
  @@index([paymentMethodId])
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  stockId    Int
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  stock Stock @relation(fields: [stockId], references: [id],onDelete: Cascade)

  @@index([orderId])
  @@index([stockId])
}

model PaymentMethod {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  orders Order[]
}

model HomePageBannner {
  id        Int          @id @default(autoincrement())
  title     String?
  imageUrl  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  status    BannerStatus @default(ACTIVE)
}

enum BannerStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}
